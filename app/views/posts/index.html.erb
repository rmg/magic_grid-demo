<h1>magic_grid examples</h1>

<h2>Requirements</h2>
<p>
The following examples have a couple dependencies outside of their actual call to magic_grid.
</p>
<h3>Gemfile</h3>
<p>
I'm using <code>Kaminari</code> for these examples. If you use <code>WillPaginate</code> then
the pagination links in the table footers will look a little different. The functionality should
be the same!
</p>
<pre>
gem 'magic_grid'
gem 'kaminari'
gem 'jquery-rails'
gem 'jquery-ui-rails'
</pre>

<h3>Assets</h3>
<h4>CSS</h4>
<pre>
/*
 *= require jquery.ui.all
 *= require_self
 *= require_tree .
 */
.magic_grid thead th .ui-icon { display: inline-block; }
</pre>

<h4>JavaScript</h4>
<pre>
//= require jquery
//= require jquery_ujs
//= require jquery.ui.all
//= require magic_grid
//= require_tree .
</pre>

<h3>Controller</h3>
<code>@posts</code> is an <code>ActiveRelation</code>. This is required for a bunch of the extras
such as sorting, filtering, searching, and non-slow pagination.
<pre>
def index
  @posts = Post.unscoped
end
</pre>

<h2>Basic Usage</h2>

<pre>&lt;%= magic_grid(@posts, [:title, :author, :date_published], per_page: 7) %&gt;</pre>
<p>Notice how <code>#to_s</code> is called on each column. Too bad <code>Author</code> does not
have a <code>#to_s</code> method!</p>
<%= magic_grid(@posts, [:title, :author, :date_published], per_page: 7) %>

<h2>Custom Column Printing</h2>
<pre>
&lt;%= magic_grid(@posts,
                  [ :title,
                    {col: :author, to_s: ->(p){p.author.name}},
                    :date_published
                  ], per_page: 7) %&gt;
</pre>
<p>Here we go, now we can get the column to show up properly. Hey, shouldn't it be sortable?</p>
<%= magic_grid(@posts,
                  [ :title,
                    {col: :author, to_s: ->(p){p.author.name}},
                    :date_published
                  ], per_page: 7) %>

